\p 5000
n = 923664999649084673702230643475170765808131726205949228094656232677884035719389169290656089268440659294077571023542768321801608094083584956192540926531087617778279749200198423354998004381259650693149178087875025411717244286085163787740771034348712820364768613497207098900654189731134556708836160014560611014366290632983565433810268284004460798271229453939611842051528838969114580189309781622093731340275739554267105161241710872431932263500374175329793526806906502153330805205073436485560723934835439398898584736227831804192673486018516887485467705139601759007580321636545262523250806819133274126605881689681272670002465175161917088887528852007158166636749736453734413592401144461682431653546274443812620497635999253074694029700549807894998068971862012393796903291228847893106704559689699644899864630670343675244204731853967470471104003942714623126490240631452819121356908029350706148201317502410891802872815960489749551167466414850402567167106085253490028699406991049933320788244606258757327208414159363124052690123306012835562201831027077888834577507364554697341560391073677911175955966331716569544901988988512497981727835672958276525485954169915395393900845873406170455726815062399357583526746964288521544556705442952569218021558381
e = 65537
c = 97194177896481512304064978309034321461025762756340017496111640975739830387385854882431480452436216956112809618668391794272302311497635805786268172820031327225122010041312335517351045828850200993395482567710274913092057731669380489916396283293318228422256704037627567943783641513830629774336056301920074020697179040836341125814095980221020668841947541974435280377948243726594711261745962802315343568928603740498708815830723776086056513943001041572944735489926813532376139870917206126334869880031295721104283287168686682125992584876950045554919986570707604807900459438257402999041174707594620245307807930156403957174889931962686759231931506277832088799251129710327680717001145498705864571383522600721659848737468866428568381038511710756191210141897519794881377993736985184496980654819932766773514928510404625439911634183914813923991259611957603388470573730102401827322156847433704797664184138440633130787499540974692066921362528006650235445635321441585218074614701821247272539415808199775303179663596055858617317087220166029719010368749476350997166651243451665453758986881333031169620832886562797896606513051066018706275321760339599845475544771768973992880336083282390617731529988148983719830408435519637355303934370943489179469129412
getb(n) = 2^(ceil(log(n)/log(2)) - 8)
testdec(x) = extern("echo " x " | ./check_net.pl") == 0
modexp(a,b,n)=my(d,bin);d=Mod(1,n);bin=binary(b);for(i=1,length(bin),d=sqr(d);if(bin[i]==1,d=d*a;););return(d);
getf1(c) = {f1 = 2; while( testdec(lift(modexp(f1, e, n) * c)), f1 = f1 * 2); f1}
getf2(c, B, f1) = {f2 = floor((n + B) / B) * (f1 / 2); while( testdec(lift(modexp(f2, e, n) * c)) == 0, f2 = f2 + (f1 / 2)); f2}
getm(c, B, f1, f2) = {mmin = ceil(n / f2); mmax = floor((n + B) / f2); ftmp = floor((2 * B) / ((mmax - mmin) + 0.01)); i = floor((ftmp * mmin) / n); f3 = ceil((i * n) / mmin); while( mmax > mmin, printf("bit range around message: %.03f\n", log(mmax - mmin) / log(2)); if( testdec(lift(modexp(f3, e, n) * c)), mmax = floor((i*n + B) / f3), mmin = ceil((i*n + B) / f3)); ftmp = floor((2 * B) / ((mmax - mmin) + 0.01)); i = floor((ftmp * mmin) / n); f3 = ceil((i * n) / mmin)); mmin}
manger(c) = {B = getb(n); f1 = getf1(c); f2 = getf2(c, B, f1); getm(c, B, f1, f2)}
print(manger(c))
\q
